#!/bin/bash

# Define variables
PROJECT_ID=54240888 # Replace with the correct GitLab project ID if needed
PACKAGE_MANAGER_URL="https://gitlab.com/api/v4/projects/$PROJECT_ID/repository/files/package-manager/raw?ref=main"
EMUINABOX_PATH="/data/data/com.termux/files/usr/bin/emuinabox" # Your emuinabox path
SCRIPT_PATH="$PREFIX/glibc/opt/scripts/emuinabox"

# Function to install necessary packages
install_packages() {
    echo "Installing necessary packages..."
    pkg install wget pv pulseaudio xwayland tsu root-repo patchelf p7zip xorg-xrandr ncurses-utils hashdeep termux-x11-nightly -y
}

# Ensure necessary directories are created
mkdir -p $PREFIX/glibc/opt/scripts

# Function to download files
download_file() {
    local url=$1
    local output=$2
    
    if command -v wget &> /dev/null; then
        wget --retry-connrefused --tries=0 --no-check-certificate --show-progress "$url" -O "$output"
    elif command -v curl &> /dev/null; then
        curl --retry 5 --retry-connrefused --retry-delay 2 -L "$url" -o "$output"
    else
        echo "Both wget and curl are not installed. Exiting."
        exit 1
    fi
}

# Download package manager file (update URL if needed)
download_file "$PACKAGE_MANAGER_URL" "$PREFIX/glibc/opt/package-manager/package-manager"

if [ ! -f "$PREFIX/glibc/opt/package-manager/package-manager" ]; then
    echo "Download failed. Check log for details."
    exit 1
fi

# Create the emuinabox script with correct path
cat << EOF > $SCRIPT_PATH
#!/bin/bash

echo "Launching EmuInABox..."
$EMUINABOX_PATH --options # Replace --options with actual options for your emulator

# Placeholder for actual emulator launch
sleep 2
echo "Emulator started successfully!"
EOF

# Give execution permission to the script
chmod +x $SCRIPT_PATH

# Create symlink to the binary in /usr/bin
ln -sf $SCRIPT_PATH $PREFIX/bin/emuinabox

echo "Setup Complete! To start, type 'emuinabox'"

# Install additional packages if not installed
if ! command -v pv &> /dev/null; then
    echo "Installing pv..."
    pkg install pv -y
fi

# Ask if the user wants to remove previous glibc and proceed with installation
read -p "Removing previous glibc. Continue? (Y/n): " proceed

if [[ $proceed =~ ^[Yy]$ ]]; then
    echo "Removing previous glibc..."
    # Placeholder for actual glibc removal code
fi

# Give user options for installation types
echo "Select an option:"
echo "1) Install previous EmuInABox with box86"
echo "2) Install new EmuInABox wow64 version"

read -p "Selected number: " selected_option

if [ "$selected_option" -eq "1" ]; then
    echo "Installing previous EmuInABox with box86..."
    # Add box86 installation steps
elif [ "$selected_option" -eq "2" ]; then
    echo "Installing new EmuInABox wow64 version..."
    # Add wow64 version installation steps
else
    echo "Invalid option selected."
    exit 1
fi

echo "Installation complete!"
