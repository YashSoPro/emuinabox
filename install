#!/bin/bash

# Color definitions
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
NC="\e[0m" # No Color

# Log file
LOGFILE=~/emuinabox_install.log
exec > >(tee -i $LOGFILE)
exec 2>&1

# ASCII Art Function
function show_ascii_art {
    echo -e "${BLUE}"
    echo "    ________  __  ______    "
    echo "   / ____/ / / / / ____/___ "
    echo "  / __/ / /_/ / / /   / __ \\"
    echo " / /___/ __  / / /___/ /_/ /"
    echo "/_____/_/ /_/  \\____/\\____/ "
    echo "---------------------------"
    echo -e "${NC}"
}

# Progress spinner function
function spinner {
    local pid=$!
    local delay=0.1
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

# Package installation function with colored output
function install_package() {
    echo -e "${YELLOW}Installing $1...${NC}"
    pkg install $1 -y &>/dev/null && echo -e "${GREEN}Installed $1 successfully${NC}" || echo -e "${RED}Failed to install $1${NC}"
}

# Start of the installation screen
function installation_notice {
    show_ascii_art
    echo -e "${BLUE}--------------------------------------------------${NC}"
    echo -e "${YELLOW}        Welcome to Emuinabox Installation${NC}"
    echo -e "${BLUE}--------------------------------------------------${NC}"
    echo -e "${YELLOW}>> Installing essential packages...${NC}"
    echo -e "${YELLOW}>> Please wait while we set everything up!${NC}"
    echo -e "${BLUE}--------------------------------------------------${NC}"
}

# Start the script
rm ~/x

# Install termux-am
installation_notice
install_package termux-am

# Set up storage
echo -n -e "${YELLOW}Setting up storage...${NC}"
termux-setup-storage & spinner
sleep 4

# Wait for storage access
while true; do
    if [ -d ~/storage/shared ]; then
        echo -e "${GREEN}Storage setup complete${NC}"
        break
    else
        echo -e "${RED}Storage permission denied${NC}"
    fi
    sleep 3
done

# Installing termux packages
echo -e "${BLUE}Updating package manager and installing essential packages...${NC}"
apt-get clean
apt-get update >/dev/null 2>&1
apt-get -y --with-new-pkgs -o Dpkg::Options::="--force-confdef" upgrade >/dev/null 2>&1

install_package x11-repo
install_package pulseaudio
install_package xwayland
install_package wget
install_package tsu
install_package root-repo
install_package patchelf
install_package p7zip
install_package xorg-xrandr
install_package ncurses-utils
install_package hashdeep
install_package termux-x11-nightly

# New useful packages for development and debugging
install_package htop
install_package git
install_package vim
install_package python
install_package neofetch

# Remove previous glibc installation
if [ -e "$PREFIX/glibc" ]; then
    echo -n -e "${YELLOW}Previous glibc installation found. Do you want to remove it? (Y/n)${NC} "
    read -r i
    i=${i:-Y}
    if [[ "$i" =~ ^[Yy]$ ]]; then
        rm -rf "$PREFIX/glibc"
        echo -e "${GREEN}Previous glibc removed.${NC}"
    else
        echo -e "${RED}Skipping glibc removal.${NC}"
        return 1
    fi
fi

# Install Emuinabox - User input for version selection
INSTALL_WOW64=0
while true; do
    echo -e "${YELLOW}Select an option:${NC}"
    echo -e "${BLUE}1)${NC} Install previous emuinabox with box86"
    echo -e "${BLUE}2)${NC} Install new emuinabox wow64 version"
    echo -n -e "${YELLOW}Selected number: ${NC}"
    read -r i
    case "$i" in
        1)
            INSTALL_WOW64=0
            break
        ;;
        2)
            INSTALL_WOW64=1
            break
        ;;
        *)
            echo -e "${RED}Invalid option! Please select 1 or 2.${NC}"
        ;;
    esac
done

# Function to download from Git with retries
function wget-git-q {
    wget -q --retry-connrefused --tries=0 --header "PRIVATE-TOKEN: $PRIVATE_TOKEN" "https://gitlab.com/api/v4/projects/$PROJECT_ID/repository/files/$1/raw?ref=main" -O "$2"
    return $?
}

# Install emuinabox
echo -e "${BLUE}Installing emuinabox${NC}"
mkdir -p "$PREFIX/glibc/opt/package-manager/installed"

if [ "$INSTALL_WOW64" = "1" ]; then
    echo "PRIVATE_TOKEN=glpat-h5r7HjKoPKZPxmfg79xs
    PROJECT_ID=54240888">$PREFIX/glibc/opt/package-manager/token
else
    echo "PRIVATE_TOKEN=glpat-Xs4HfrCkMpbedkPycqzP
    PROJECT_ID=52465323">$PREFIX/glibc/opt/package-manager/token
fi

# Load tokens and package manager
. "$PREFIX/glibc/opt/package-manager/token"
if ! wget-git-q "package-manager" "$PREFIX/glibc/opt/package-manager/package-manager"; then
    echo -e "${RED}Download failed${NC}"
    return 1
fi
. "$PREFIX/glibc/opt/package-manager/package-manager"

# Synchronize and install wine packages
sync-all
if [ "$INSTALL_WOW64" = "1" ]; then
    sync-package wine-9.3-vanilla-wow64
else
    sync-package wine-ge-custom-8-25
fi

# Create symbolic link for emuinabox
ln -sf "$PREFIX/glibc/opt/scripts/emuinabox" "$PREFIX/bin/emuinabox"
echo -e "${GREEN}Emuinabox installed. To start, type 'emuinabox'${NC}"

# Add $PREFIX/bin to PATH
export PATH=$PREFIX/bin:$PATH
echo -e "${GREEN} PATH updated. You can now run 'emuinabox' successfully.${NC}"
