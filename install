#!/bin/bash

# Function to print colored text
color_text() {
    echo -e "\033[1;${1}m${2}\033[0m"
}

# Create a log file
LOG_FILE="$HOME/emuinabox_install.log"
exec &> >(tee -a "$LOG_FILE")

# GUI setup
whiptail --title "EmuInABox Installer" --msgbox "Welcome to the EmuInABox Installer!" 10 60

# Clear previous script files
rm ~/x

# Install termux-am
whiptail --title "Installing termux-am" --msgbox "Installing termux-am..." 10 60
pkg install termux-am -y &>/dev/null

termux-setup-storage & sleep 4 &>/dev/null

while true; do
    if [ -d ~/storage/shared ]; then
        break
    else
        whiptail --title "Error" --msgbox "Storage permission denied. Retrying..." 10 60
    fi
    sleep 3
done

# Update package manager
whiptail --title "Installing termux packages" --msgbox "Installing necessary packages..." 10 60
apt-get clean
apt-get update >/dev/null 2>&1
apt-get -y --with-new-pkgs -o Dpkg::Options::="--force-confdef" upgrade >/dev/null 2>&1

# Install whiptail if not already installed
if ! pkg list-installed | grep -q "whiptail"; then
    whiptail --title "Installing whiptail" --msgbox "Installing whiptail..." 10 60
    pkg install whiptail -y &>/dev/null
fi

# List of essential packages
packages=(
    x11-repo
    pulseaudio
    xwayland
    wget
    tsu
    root-repo
    patchelf
    p7zip
    xorg-xrandr
    ncurses-utils
    hashdeep
    termux-x11-nightly
)

for pkg in "${packages[@]}"; do
    if ! pkg list-installed | grep -q "$pkg"; then
        whiptail --title "Installing $pkg" --msgbox "Installing $pkg..." 10 60
        pkg install "$pkg" -y &>/dev/null
    else
        whiptail --title "$pkg Installed" --msgbox "$pkg is already installed." 10 60
    fi
done

# Check for previous glibc
if [ -e $PREFIX/glibc ]; then
    if (whiptail --title "Remove Previous glibc" --yesno "Previous glibc detected. Remove it?" 10 60); then
        rm -rf $PREFIX/glibc
    else
        exit 1
    fi
fi

INSTALL_WOW64=0

# User selection for installation type
OPTION=$(whiptail --title "Select Installation Type" --menu "Choose one of the following options:" 15 60 2 \
    "1" "Install previous EmuInABox with box86" \
    "2" "Install new EmuInABox wow64 version" 3>&1 1>&2 2>&3)

case "$OPTION" in
1)
    INSTALL_WOW64=0
    ;;
2)
    INSTALL_WOW64=1
    ;;
*)
    exit 1
    ;;
esac

whiptail --title "Installing EmuInABox" --msgbox "Installing EmuInABox..." 10 60

# Function to download files
function wget-git-q {
    wget -q --retry-connrefused --tries=0 --header "PRIVATE-TOKEN: $PRIVATE_TOKEN" "https://gitlab.com/api/v4/projects/$PROJECT_ID/repository/files/$1/raw?ref=main" -O $2
    return $?
}

whiptail --title "Updating Package Manager" --msgbox "Updating package manager..." 10 60
mkdir -p $PREFIX/glibc/opt/package-manager/installed

if [ "$INSTALL_WOW64" = "1" ]; then
    echo "PRIVATE_TOKEN=glpat-h5r7HjKoPKZPxmfg79xs
PROJECT_ID=54240888" > $PREFIX/glibc/opt/package-manager/token
else
    echo "PRIVATE_TOKEN=glpat-Xs4HfrCkMpbedkPycqzP
PROJECT_ID=52465323" > $PREFIX/glibc/opt/package-manager/token
fi

. $PREFIX/glibc/opt/package-manager/token

if ! wget-git-q "package-manager" "$PREFIX/glibc/opt/package-manager/package-manager"; then
    whiptail --title "Error" --msgbox "Download failed" 10 60
    exit 1
fi

. $PREFIX/glibc/opt/package-manager/package-manager
sync-all

if [ "$INSTALL_WOW64" = "1" ]; then
    sync-package wine-9.3-vanilla-wow64
else
    sync-package wine-ge-custom-8-25
fi

# Create the emuinabox script
cat << 'EOF' > $PREFIX/glibc/opt/scripts/emuinabox
#!/bin/bash

echo "Launching EmuInABox..."

# Launch the emulator
/data/data/com.termux/files/usr/glibc/opt/scripts/emuinabox --options  # Add any necessary options here

# Placeholder for actual emulator launch
sleep 2
echo "Emulator started successfully!"
EOF

chmod +x $PREFIX/glibc/opt/scripts/emuinabox
ln -sf $PREFIX/glibc/opt/scripts/emuinabox $PREFIX/bin/emuinabox

whiptail --title "Setup Complete" --msgbox "Setup Complete! To start, type 'emuinabox'" 10 60
echo "Log file: $LOG_FILE"
